import torch.nn as nn
import torch.nn.functional as F
import torch
import math
from functools import partial
from torch.nn.modules.utils import _triple
from torch.autograd import Variable


def downsample_basic_block(x, planes, stride):
    out = F.avg_pool3d(x, kernel_size=1, stride=stride)
    zero_pads = torch.Tensor(out.size(0), planes - out.size(1),
                             out.size(2), out.size(3),
                             out.size(4)).zero_()
    if isinstance(out.data, torch.cuda.FloatTensor):
        zero_pads = zero_pads.cuda()

    out = Variable(torch.cat([out.data, zero_pads], dim=1))

    return out


class BasicBlock3d(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, spatial_stride=1, temporal_stride=1, dilation=1, downsample=None):
        super(BasicBlock3d, self).__init__()
        self.inplanes = inplanes
        self.inplanes = planes
        self.spatial_stride = spatial_stride
        self.temporal_stride = temporal_stride
        self.dilation = dilation
        self.downsample = downsample

        self.conv1 = nn.Conv3d(inplanes, planes, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1),
                               dilation=(1, 1, 1), bias=False)
        self.norm1 = nn.BatchNorm3d(planes)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv3d(inplanes, planes * self.expansion, kernel_size=(3, 3, 3), stride=(1, 1, 1),
                               padding=(1, 1, 1), bias=False)
        self.norm2 = nn.BatchNorm3d(planes * self.expansion)

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        out = self.norm1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.norm2(out)

        if self.downsample is not None:
            residual = self.downsample(x)

        out += residual
        out = self.relu(out)

        return out


class Bottleneck3d(nn.Module):
    expansion = 4

    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(Bottleneck3d, self).__init__()
        self.inplanes = inplanes
        self.strides = stride
        self.planes = planes
        self.downsample = downsample
        self.conv1 = nn.Conv3d(inplanes, planes, kernel_size=1, bias=False)
        self.norm1 = nn.BatchNorm3d(planes)
        self.conv2 = nn.Conv3d(planes, planes, kernel_size=(5, 5, 5), stride=stride, padding=(2, 2, 2), bias=False)
        self.norm2 = nn.BatchNorm3d(planes)
        self.conv3 = nn.Conv3d(planes, planes * 4, kernel_size=1, bias=False)
        self.norm3 = nn.BatchNorm3d(planes * self.expansion)
        self.relu = nn.ReLU(inplace=True)

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        out = self.norm1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.norm2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.norm3(out)

        if self.downsample is not None:
            residual = self.downsample(x)

        out += residual
        out = self.relu(out)

        return out


class Resnet3d(nn.Module):
    def __init__(self, block, layers, shortcut_type='B', last_fc=False, zero_init_residual=True):
        self.last_fc = last_fc
        self.inplanes = 64
        super(Resnet3d, self).__init__()
        self.zero_init_residual = zero_init_residual
        self.conv1 = nn.Conv3d(3, 64, (7, 7, 7), stride=(1, 2, 2),
                               padding=(3, 3, 3), bias=False)
        self.norm1 = nn.BatchNorm3d(64)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool3d(kernel_size=(3, 3, 3), stride=2, padding=1)

        self.layer1 = self._make_layer(block, 64, layers[0], shortcut_type, temporal_stride=1, spatial_stride=1)
        self.layer2 = self._make_layer(block, 128, layers[1], shortcut_type, temporal_stride=1, spatial_stride=2)
        self.layer3 = self._make_layer(block, 256, layers[2], shortcut_type, temporal_stride=1, spatial_stride=2)
        self.layer4 = self._make_layer(block, 512, layers[3], shortcut_type, temporal_stride=1, spatial_stride=2)
        for m in self.modules():
            if isinstance(m, nn.Conv3d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
            elif isinstance(m, nn.BatchNorm3d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def forward(self, x):
        x = self.conv1(x)  # c1 64
        x = self.norm1(x)
        c1 = self.relu(x)         # 128 224
        x_1 = self.maxpool(c1)

        c2 = self.layer1(x_1)  # 256   112
        c3 = self.layer2(c2)  # 512   56
        c4 = self.layer3(c3)  # 1024  28
        c5 = self.layer4(c4)  # 2048  14

        return c2, c3, c4, c5

    def _make_layer(self, block, planes, blocks, shortcut_type, temporal_stride=1, spatial_stride=1):
        downsample = None
        self.temporal_stride = temporal_stride
        self.spatial_stride = spatial_stride
        self.act_stride = (self.temporal_stride, self.spatial_stride, self.spatial_stride)

        if spatial_stride != 1 or self.inplanes != planes * block.expansion:
            if shortcut_type == 'A':
                downsample = partial(downsample_basic_block,
                                     planes=planes * block.expansion,
                                     stride=self.act_stride)
            else:
                downsample = nn.Sequential(
                    nn.Conv3d(self.inplanes, planes * block.expansion,
                              kernel_size=1, stride=self.act_stride, bias=False),
                    nn.BatchNorm3d(planes * block.expansion)
                )

        layers = []
        layers.append(block(self.inplanes, planes, self.act_stride, downsample))
        self.inplanes = planes * block.expansion
        for i in range(1, blocks):
            layers.append(block(self.inplanes, planes))

        return nn.Sequential(*layers)


def resnet10(**kwargs):
    """Constructs a ResNet-18 model.
    """
    model = Resnet3d(BasicBlock3d, [1, 1, 1, 1], **kwargs)
    return model


def resnet18(**kwargs):
    """Constructs a ResNet-18 model.
    """
    model = Resnet3d(BasicBlock3d, [2, 2, 2, 2], **kwargs)
    return model


def resnet34(**kwargs):
    """Constructs a ResNet-34 model.
    """
    model = Resnet3d(BasicBlock3d, [3, 4, 6, 3], **kwargs)
    return model


def resnet50(**kwargs):
    """Constructs a ResNet-50 model.
    """
    model = Resnet3d(Bottleneck3d, [3, 4, 6, 3], **kwargs)
    return model


def resnet101(**kwargs):
    """Constructs a ResNet-101 model.
    """
    model = Resnet3d(Bottleneck3d, [3, 4, 23, 3], **kwargs)
    return model


def resnet152(**kwargs):
    """Constructs a ResNet-101 model.
    """
    model = Resnet3d(Bottleneck3d, [3, 8, 36, 3], **kwargs)
    return model


def resnet200(**kwargs):
    """Constructs a ResNet-101 model.
    """
    model = Resnet3d(Bottleneck3d, [3, 24, 36, 3], **kwargs)
    return model
